The "base_geometry" module
=========================

Using "base_geometry" function
_________________________

Bring in "BaseGeometry":
     >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Create an instance of :
     >>> bg = BaseGeometry()

Test is bg an instance of BaseGeometry class
     >>> isinstance(bg, BaseGeometry)
     True

Test for normal use:
     >>> bg = BaseGeometry()

Test for missing value argument
     >>> bg.integer_validator("name", )
     Traceback (most recent call last):
     ...
     TypeError: integer_validator() missing 1 required positional argument: 'value'

Test for negative numbers
     >>> bg.integer_validator("distance", -4)
     Traceback (most recent call last):
     ...
     ValueError: distance must be greater than 0

Test for zero value
     >>> bg.integer_validator("width", 0)
     Traceback (most recent call last):
     ...
     ValueError: width must be greater than 0

Test for integer validator if value is an int
     >>> bg.integer_validator("name", "John")
     Traceback (most recent call last):
     ...
     TypeError: name must be an integer

Test for integer validator if value is not none
     >>> bg.integer_validator("Red", none)
     Traceback (most recent call last):
     ...
     TypeError: Red must be an integer

Test for integer validator if no arguments are given
     >>> bg.integer_validator()
     Traceback (most recent call last):
     ...
     TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test for area
     >>> bg.area()
     Traceback (most recent call last):
      ...
     Exception: area() is not implemented
